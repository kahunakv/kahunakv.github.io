"use strict";(self.webpackChunkkahunakv_docs=self.webpackChunkkahunakv_docs||[]).push([[976],{7879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"intro","title":"Tutorial: Key/Value Store","description":"Kahuna provides the building blocks to construct distributed systems. The key/value store can be used to store configuration, service discoverability, metadata, caching, sessions, and more. In this tutorial, you will learn how it works.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Getting Started","permalink":"/docs/getting-started"}}');var s=t(4848),a=t(8453);const r={sidebar_position:1},o="Tutorial: Key/Value Store",c={},l=[{value:"Starting Kahuna",id:"starting-kahuna",level:2},{value:"Setting and Retrieving Keys",id:"setting-and-retrieving-keys",level:2},{value:"Expiration",id:"expiration",level:2},{value:"Durability",id:"durability",level:2},{value:"Revisions",id:"revisions",level:2},{value:"Compare And Swap (CAS)",id:"compare-and-swap-cas",level:2},{value:"Scripts",id:"scripts",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"tutorial-keyvalue-store",children:"Tutorial: Key/Value Store"})}),"\n",(0,s.jsxs)(n.p,{children:["Kahuna provides the building blocks to construct distributed systems. The ",(0,s.jsx)(n.strong,{children:"key/value store"})," can be used to store ",(0,s.jsx)(n.strong,{children:"configuration, service discoverability, metadata, caching, sessions, and more"}),". In this tutorial, you will learn how it works."]}),"\n",(0,s.jsx)(n.h2,{id:"starting-kahuna",children:"Starting Kahuna"}),"\n",(0,s.jsxs)(n.p,{children:["Before you proceed, make sure that Kahuna is running on your system. Refer to the ",(0,s.jsx)(n.a,{href:"server-installation",children:"Server Installation"})," section for instructions. You will also need the ",(0,s.jsx)(n.a,{href:"kahuna-cli",children:"Kahuna CLI"})," to execute commands on the server."]}),"\n",(0,s.jsx)(n.p,{children:"After installing the necessary components, run the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"~> kahuna-cli --version\n"})}),"\n",(0,s.jsx)(n.h2,{id:"setting-and-retrieving-keys",children:"Setting and Retrieving Keys"}),"\n",(0,s.jsx)(n.p,{children:"Within the Kahuna CLI, you can execute commands, transactions, and scripts. Use the following format to set and retrieve key/value pairs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'~> kahuna-cli\nKahuna Shell 0.0.1 (alpha)\n\nkahuna-cli> set myconfig "my-value"                 \nr0 set 9ms\n\nkahuna-cli> get myconfig                          \nr0 my-value 7ms\n\nkahuna-cli> set myconfig "my-value-2"                 \nr1 set 7ms\n\nkahuna-cli> get myconfig                          \nr1 my-value-2 6ms\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"set"})," command stores key/value pairs durably in the cluster. Internally, the system uses consistent hashing to redirect the request to the leader node of the corresponding Raft group, which coordinates the operation, achieves consensus, and ensures durable storage and replication. The ",(0,s.jsx)(n.code,{children:"get"})," command retrieves the most recent value consistently from the appropriate leader node."]}),"\n",(0,s.jsx)(n.h2,{id:"expiration",children:"Expiration"}),"\n",(0,s.jsxs)(n.p,{children:["By default, keys persisted to disk do not expire. However, you can specify an expiration time so that keys are removed after a defined period. You can set an expiration when creating a key or modify it later using the ",(0,s.jsx)(n.code,{children:"extend"})," command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kahuna-cli> set myconfig "my-value" ex 30000\nr2 set 181ms\n\nkahuna-cli> set myconfig "my-value"                 \nr3 set 40ms\n\nkahuna-cli> extend myconfig 30000              \nr3 extended 36ms\n'})}),"\n",(0,s.jsx)(n.p,{children:"Expiration times are specified in milliseconds."}),"\n",(0,s.jsx)(n.h2,{id:"durability",children:"Durability"}),"\n",(0,s.jsx)(n.p,{children:"By default, Kahuna ensures strong consistency for durability, meaning that all values are replicated, and the client is notified of a successful operation only after receiving confirmation from the majority of nodes in the cluster."}),"\n",(0,s.jsx)(n.p,{children:'In high-performance scenarios or when working with ephemeral data, on-disk durability may not be necessary or practical. For these cases, Kahuna offers an "ephemeral" durability mode, in which data is stored only in the leader node\'s volatile memory.'}),"\n",(0,s.jsx)(n.p,{children:'Commands using ephemeral durability are prefixed with an "e". For example:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kahuna-cli> eset tempconfig "my-value"              \nr0 set 97ms\n\nkahuna-cli> eget tempconfig                         \nr0 my-value 32ms\n'})}),"\n",(0,s.jsx)(n.p,{children:"Keep in mind that ephemeral data will be lost if the node crashes or if memory pressure forces the system to free up space by removing the least-used keys. You can also specify an explicit expiration time for ephemeral keys. Ephemeral storage provides faster operations without the overhead of replication and persistence."}),"\n",(0,s.jsx)(n.h2,{id:"revisions",children:"Revisions"}),"\n",(0,s.jsx)(n.p,{children:"Each time a key is updated, you will notice an incrementing revision number (e.g., r0, r1, etc.). This value, known as the revision, is a monotonic version number that tracks when a key was last modified. Every time a key is updated or deleted, its revision increments, ensuring strong consistency and strict ordering."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kahuna-cli> set myconf "some config"             \nr0 set 108ms\n\nkahuna-cli> set myconf "some other config"       \nr1 set 30ms\n\nkahuna-cli> set myconf "another config"          \nr2 set 50ms\n\nkahuna-cli> get myconf\nr2 another config 65ms\n'})}),"\n",(0,s.jsx)(n.h2,{id:"compare-and-swap-cas",children:"Compare And Swap (CAS)"}),"\n",(0,s.jsx)(n.p,{children:"The Compare-And-Swap (CAS) operation ensures atomic updates and prevents race conditions in environments where multiple clients may attempt to modify the same key simultaneously."}),"\n",(0,s.jsx)(n.h2,{id:"scripts",children:"Scripts"}),"\n",(0,s.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);