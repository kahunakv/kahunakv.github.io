"use strict";(self.webpackChunkkahunakv_docs=self.webpackChunkkahunakv_docs||[]).push([[9954],{486:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"distributed-keyvalue-store/revisions","title":"Revisions","description":"In Kahuna, a revision is a monotonic version number that tracks when a key was last modified. Every time a key is updated or deleted, its revision increments, ensuring strong consistency and strict ordering. It acts as a logical timestamp to resolve stale client operations.","source":"@site/docs/distributed-keyvalue-store/revisions.md","sourceDirName":"distributed-keyvalue-store","slug":"/distributed-keyvalue-store/revisions","permalink":"/docs/distributed-keyvalue-store/revisions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/distributed-keyvalue-store/revisions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Compare-And-Swap (CAS)","permalink":"/docs/distributed-keyvalue-store/cas"},"next":{"title":"Transactions","permalink":"/docs/distributed-keyvalue-store/transactions"}}');var r=s(4848),t=s(8453);const a={},o="Revisions",l={},d=[{value:"Understanding revisions",id:"understanding-revisions",level:2},{value:"Querying Previous Revisions",id:"querying-previous-revisions",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"revisions",children:"Revisions"})}),"\n",(0,r.jsxs)(n.p,{children:["In Kahuna, a ",(0,r.jsx)(n.code,{children:"revision"})," is a monotonic version number that tracks when a key was last modified. Every time a key is updated or deleted, its ",(0,r.jsx)(n.code,{children:"revision"})," increments, ensuring strong consistency and strict ordering. It acts as a logical timestamp to resolve stale client operations."]}),"\n",(0,r.jsx)(n.h2,{id:"understanding-revisions",children:"Understanding revisions"}),"\n",(0,r.jsxs)(n.p,{children:["Keys are always created at revision ",(0,r.jsx)(n.code,{children:"r0"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"kahuna-cli>  set `example` 'value1'                \nr0 set 17ms\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Modify the key and revision will change to ",(0,r.jsx)(n.code,{children:"r1"})," and then to ",(0,r.jsx)(n.code,{children:"r2"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"kahuna-cli>  set `example` 'value2'     \nr1 set 12ms\n\nkahuna-cli>  set `example` 'value3'     \nr2 set 9ms\n"})}),"\n",(0,r.jsx)(n.p,{children:"When querying a key, you can see its current revision. The revision does not change during read operations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"kahuna-cli>  get `example`\nr2 value3 10ms\n\nkahuna-cli>  get `example`\nr2 value3 9ms\n"})}),"\n",(0,r.jsx)(n.h2,{id:"querying-previous-revisions",children:"Querying Previous Revisions"}),"\n",(0,r.jsx)(n.p,{children:"Kahuna works like a time machine, allowing you to query the value of a key at any particular point-in-time:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"kahuna-cli>  get `example` at 0\nr0 value1 11ms\n\nkahuna-cli>  get `example` at 1\nr1 value2 13ms\n"})}),"\n",(0,r.jsx)(n.p,{children:"This lets you inspect historical data, trace config or state changes historically, debug changes over time, investigate what value caused a bug or revert to stable known-good values."}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Revision tracks when a key was last modified."}),"\n",(0,r.jsx)(n.li,{children:"It updates on every write but stays the same for reads."}),"\n",(0,r.jsx)(n.li,{children:"Used in leader election, distributed locks and race condition prevention."}),"\n",(0,r.jsx)(n.li,{children:"Essential for Compare-And-Swap (CAS) operations."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(6540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);