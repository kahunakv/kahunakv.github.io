"use strict";(self.webpackChunkkahunakv_docs=self.webpackChunkkahunakv_docs||[]).push([[6182],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(6540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},9458:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"scripts/commands/eget","title":"Command: EGet","description":"Get the value of key from the volatile storage. If the key does not exist null is returned.","source":"@site/docs/scripts/commands/eget.md","sourceDirName":"scripts/commands","slug":"/scripts/commands/eget","permalink":"/docs/scripts/commands/eget","draft":false,"unlisted":false,"editUrl":"https://github.com/kahunakv/kahunakv.github.io/tree/main/docs/scripts/commands/eget.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Command: Get","permalink":"/docs/scripts/commands/get"},"next":{"title":"Command: Extends","permalink":"/docs/scripts/commands/extend"}}');var o=t(4848),i=t(8453);const r={},c="Command: EGet",a={},m=[{value:"Get Revision",id:"get-revision",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"command-eget",children:"Command: EGet"})}),"\n",(0,o.jsxs)(n.p,{children:["Get the value of key from the volatile storage. If the key does not exist ",(0,o.jsx)(n.code,{children:"null"})," is returned."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-swift",children:"eset `config/limits/max-connections` 1000\nr0 set 9ms\n\neget `config/limits/max-connections`\nr0 1000 7ms\n"})}),"\n",(0,o.jsx)(n.h2,{id:"get-revision",children:"Get Revision"}),"\n",(0,o.jsxs)(n.p,{children:["Passing the ",(0,o.jsx)(n.code,{children:"AT"})," modifier allows to retrieve the value of a specific revision:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-swift",children:"eset `config/limits/max-connections` 1000\nr0 set 9ms\n\neget `config/limits/max-connections`\nr0 1000 7ms\n\neset `config/limits/max-connections` 500\nr1 set 11ms\n\neset `config/limits/max-connections` 200\nr2 set 11ms\n\neget `config/limits/max-connections`\nr2 200 8ms\n\neget `config/limits/max-connections` at 0\nr0 1000 9ms\n\neget `config/limits/max-connections` at 1\nr1 500 8ms\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"In the case of ephemeral storage, the server stores a limited number of recent revisions. If you need to store all revisions of a key, you should use persistent storage."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Check the ",(0,o.jsx)(n.a,{href:"../../distributed-keyvalue-store/revisions",children:"revisions"})," section for more information about how they work."]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);