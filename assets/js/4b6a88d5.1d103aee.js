"use strict";(self.webpackChunkkahunakv_docs=self.webpackChunkkahunakv_docs||[]).push([[9255],{8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>o});var r=n(6540);const i={},a=r.createContext(i);function l(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(a.Provider,{value:s},e.children)}},9771:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>t,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"scripts/expressions","title":"Expressions","description":"Expressions are the fundamental building blocks of Kahuna Script\u2014nearly everything you write is an expression. The simplest and most precise definition of an expression is: anything that represents a value.","source":"@site/docs/scripts/expressions.md","sourceDirName":"scripts","slug":"/scripts/expressions","permalink":"/docs/scripts/expressions","draft":false,"unlisted":false,"editUrl":"https://github.com/kahunakv/kahunakv.github.io/tree/main/docs/docs/scripts/expressions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Types","permalink":"/docs/scripts/types"},"next":{"title":"Control Structures","permalink":"/docs/scripts/control-structures"}}');var i=n(4848),a=n(8453);const l={},o="Expressions",t={},c=[{value:"Operators",id:"operators",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:3},{value:"Logical Operators",id:"logical-operators",level:3},{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"Range Operators",id:"range-operators",level:3},{value:"Function Calls",id:"function-calls",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"expressions",children:"Expressions"})}),"\n",(0,i.jsx)(s.p,{children:"Expressions are the fundamental building blocks of Kahuna Script\u2014nearly everything you write is an expression. The simplest and most precise definition of an expression is: anything that represents a value."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-visual-basic",children:'let my_var = 100 + 20.5\nlet is_active = true || false\nlet text = concat("my text", some_other_text_var)\n'})}),"\n",(0,i.jsx)(s.p,{children:"Expressions can include variables, literal values, placeholders, operators, and grouping parentheses."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-visual-basic",children:"let total = (price * quantity) + tax\n"})}),"\n",(0,i.jsx)(s.p,{children:"This expression combines variables and operators with parentheses to control evaluation order, and it ultimately produces a value."}),"\n",(0,i.jsx)(s.h2,{id:"operators",children:"Operators"}),"\n",(0,i.jsx)(s.h3,{id:"arithmetic-operators",children:"Arithmetic Operators"}),"\n",(0,i.jsx)(s.p,{children:"These allow you to perform basic mathematical operations:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"+"}),"\u2003Addition"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-"}),"\u2003Subtraction"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"*"}),"\u2003Multiplication"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"/"}),"\u2003Division"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"%"}),"\u2003Modulo (remainder)"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-visual-basic",children:"let result = (10 + 5) * 2  # result is 30\nlet remainder = 17 % 3     # remainder is 2\n"})}),"\n",(0,i.jsx)(s.p,{children:"These operators can be used with numeric values and expressions within your script logic."}),"\n",(0,i.jsx)(s.h3,{id:"logical-operators",children:"Logical Operators"}),"\n",(0,i.jsx)(s.p,{children:"These apply boolean logic to expressions within a script:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"&&"}),":\u2003Returns ",(0,i.jsx)(s.code,{children:"true"})," if ",(0,i.jsx)(s.strong,{children:"both"})," expressions are true"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"||"}),":\u2003Returns ",(0,i.jsx)(s.code,{children:"true"})," if ",(0,i.jsx)(s.strong,{children:"at least one"})," expression is true"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"!"})," or ",(0,i.jsx)(s.code,{children:"not"}),":\u2003Inverts the boolean value of an expression"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-visual-basic",children:"let is_valid = (age > 18) && (has_id == true)\nlet should_retry = (error != null) || (timeout_occurred)\nlet is_guest = !is_registered\n"})}),"\n",(0,i.jsx)(s.p,{children:"Logical operators are essential for building conditions, control flows, and validations in Kahuna Scripts."}),"\n",(0,i.jsx)(s.h3,{id:"comparison-operators",children:"Comparison Operators"}),"\n",(0,i.jsx)(s.p,{children:"These allow you to compare two values:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"=="}),"\u2003Equal to"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"!="}),"\u2003Not equal to"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"<"}),"\u2003Less than"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"<="}),"\u2003Less than or equal to"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:">"}),"\u2003Greater than"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:">="}),"\u2003Greater than or equal to"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-visual-basic",children:'let is_adult = age >= 18\nlet has_access = role == "admin"\nlet is_different = score1 != score2\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Comparison operators return boolean values (",(0,i.jsx)(s.code,{children:"true"})," or ",(0,i.jsx)(s.code,{children:"false"}),") and are commonly used in conditions, filters, and validations within Kahuna Scripts."]}),"\n",(0,i.jsx)(s.h3,{id:"range-operators",children:"Range Operators"}),"\n",(0,i.jsx)(s.p,{children:"These allow you to easily create an array of values from a minimum to a maximum:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-visual-basic",children:"let my_range = 1..10\n"})}),"\n",(0,i.jsx)(s.p,{children:"This creates an array:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"})}),"\n",(0,i.jsx)(s.p,{children:"You can use ranges for iteration, indexing, slicing, or generating value sets dynamically in Kahuna Scripts."}),"\n",(0,i.jsx)(s.h2,{id:"function-calls",children:"Function Calls"}),"\n",(0,i.jsxs)(s.p,{children:["Kahuna Script provides many ",(0,i.jsx)(s.strong,{children:"built-in functions"})," to assist developers with various common tasks."]}),"\n",(0,i.jsx)(s.p,{children:"A function call uses the following syntax:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:"function_name(arg1, arg2, ...)\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:'let name = upper("alice")             # returns "ALICE"\nlet a_number = round(10.5)            # rounds a number\nlet json_str = to_json([10, 42, 30])  # serializes to JSON\n'})}),"\n",(0,i.jsx)(s.p,{children:"These functions cover areas like string manipulation, key/value operations, math, time, JSON handling, and more\u2014making Kahuna Script a powerful tool for writing logic close to the data."})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);