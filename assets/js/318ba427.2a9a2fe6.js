"use strict";(self.webpackChunkkahunakv_docs=self.webpackChunkkahunakv_docs||[]).push([[843],{6288:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"distributed-keyvalue-store","title":"Distributed Key/Value Store","description":"A distributed key/value store is a type of database system designed to store, retrieve, and manage data across multiple nodes in a cluster or distributed environment. It follows a simple key-value data model, where keys are unique identifiers, and values are the associated data objects.","source":"@site/docs/distributed-keyvalue-store.md","sourceDirName":".","slug":"/distributed-keyvalue-store","permalink":"/docs/distributed-keyvalue-store","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/distributed-keyvalue-store.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Distributed Locks","permalink":"/docs/distributed-locks"},"next":{"title":"Distributed Sequencer","permalink":"/docs/distributed-sequencer"}}');var t=n(4848),r=n(8453);const l={sidebar_position:4},o="Distributed Key/Value Store",d={},a=[{value:"Key Characteristics",id:"key-characteristics",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Kahuna Distributed Store",id:"kahuna-distributed-store",level:2},{value:"Revisions",id:"revisions",level:2},{value:"Compare-And-Swap (CAS)",id:"compare-and-swap-cas",level:2},{value:"API",id:"api",level:2},{value:"Set",id:"set",level:3},{value:"Compare-Value-And-Set (CVAS)",id:"compare-value-and-set-cvas",level:3},{value:"Compare-Revision-And-Set (CRAS)",id:"compare-revision-and-set-cras",level:3},{value:"Get",id:"get",level:3},{value:"Delete",id:"delete",level:4},{value:"Extend",id:"extend",level:3}];function c(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"distributed-keyvalue-store",children:"Distributed Key/Value Store"})}),"\n",(0,t.jsxs)(s.p,{children:["A ",(0,t.jsx)(s.strong,{children:"distributed key/value store"})," is a type of ",(0,t.jsx)(s.strong,{children:"database system"})," designed to store, retrieve, and manage data across multiple nodes in a cluster or distributed environment. It follows a simple ",(0,t.jsx)(s.strong,{children:"key-value data model"}),", where ",(0,t.jsx)(s.strong,{children:"keys"})," are unique identifiers, and ",(0,t.jsx)(s.strong,{children:"values"})," are the associated data objects."]}),"\n",(0,t.jsx)(s.h2,{id:"key-characteristics",children:"Key Characteristics"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Scalability"})," \u2013 The system distributes data across multiple machines, allowing it to scale horizontally as demand increases."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Fault Tolerance"})," \u2013 By replicating data across multiple nodes, it ensures resilience against failures."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"High Availability"})," \u2013 Data is accessible even if some nodes go offline, minimizing downtime."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Strong Consistency"})," \u2013 Ensures reliable data integrity using the ",(0,t.jsx)(s.strong,{children:"Raft consensus protocol"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Low Latency"})," \u2013 Optimized for fast read/write operations, making it ideal for caching, real-time applications and distributed computing."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Distributed Transactions"})," \u2013 Supports multi-node transactions with ",(0,t.jsx)(s.strong,{children:"Multi-Version Concurrency Control (MVCC)"}),", ",(0,t.jsx)(s.strong,{children:"Pessimistic/Optimistic Locking"}),", and ",(0,t.jsx)(s.strong,{children:"Two-Phase Commit (2PC)"})," for consistency across distributed operations."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Configuration Management"})," \u2013 Storing dynamic settings for applications (e.g., feature flags)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Metadata Storage"})," \u2013 Keeping track of distributed system metadata (e.g., leader election in Raft)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Session Management"})," \u2013 Storing user sessions across distributed servers."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Caching"})," \u2013 Speeding up data access by storing frequently used data."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Distributed Coordination"})," \u2013 Managing distributed locks and leader election."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Transactional Workloads"})," \u2013 Ensuring atomicity and consistency across distributed transactions."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"kahuna-distributed-store",children:"Kahuna Distributed Store"}),"\n",(0,t.jsxs)(s.p,{children:["In the context of ",(0,t.jsx)(s.strong,{children:"Kahuna"}),", its ",(0,t.jsx)(s.strong,{children:"distributed key/value store"})," capability allows applications to store and retrieve data efficiently, ensuring ",(0,t.jsx)(s.strong,{children:"strong consistency, high availability, and low latency"}),". Additionally, ",(0,t.jsx)(s.strong,{children:"Kahuna supports distributed transactions"}),", enabling applications to execute ",(0,t.jsx)(s.strong,{children:"atomic, consistent, isolated, and durable (ACID) operations"})," across multiple nodes. This is achieved using:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Multi-Version Concurrency Control (MVCC)"})," \u2013 Allowing non-blocking reads and improved concurrency."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Pessimistic and Optimistic Locking"})," \u2013 Supporting different locking mechanisms to prevent conflicts in concurrent transactions."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Two-Phase Commit (2PC)"})," \u2013 Ensuring atomicity in distributed transactions across multiple nodes."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["These features make Kahuna a robust solution for transactional workloads requiring ",(0,t.jsx)(s.strong,{children:"data integrity, consistency, and high availability"})," in distributed environments."]}),"\n",(0,t.jsx)(s.h2,{id:"revisions",children:"Revisions"}),"\n",(0,t.jsx)(s.p,{children:"In Kahuna, a revision is a monotonic, ever-increasing number that represents the global order of modifications in the key-value store. Every time a change (write, delete, or transaction) occurs in Kahuna, the revision number increases, ensuring strong consistency and strict ordering of operations. Each revision is a 64-bit cluster-wide counter."}),"\n",(0,t.jsx)(s.h2,{id:"compare-and-swap-cas",children:"Compare-And-Swap (CAS)"}),"\n",(0,t.jsx)(s.p,{children:"A Compare-And-Swap (CAS) operation is critical in a distributed key-value store like Kahuna because it ensures atomic updates and prevents race conditions in environments where multiple clients may try to modify the same key simultaneously. CAS is an atomic operation that:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Compares a key\u2019s current value (or version) against an expected value."}),"\n",(0,t.jsx)(s.li,{children:"Only updates the key if the current value matches the expected value."}),"\n",(0,t.jsx)(s.li,{children:"Fails safely if another process modified the key in the meantime."}),"\n"]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:(0,t.jsx)(s.strong,{children:"Use Case"})}),(0,t.jsx)(s.th,{children:(0,t.jsx)(s.strong,{children:"How CAS Helps"})})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Leader Election"})}),(0,t.jsx)(s.td,{children:"Ensures only one node becomes leader."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Distributed Locks"})}),(0,t.jsx)(s.td,{children:"Prevents multiple nodes from acquiring the same lock."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Configuration Updates"})}),(0,t.jsx)(s.td,{children:"Prevents conflicting writes to shared config values."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Rate Limiting"})}),(0,t.jsx)(s.td,{children:"Ensures atomic updates to request counters."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Concurrent Transactions"})}),(0,t.jsx)(s.td,{children:"Avoids lost updates when multiple clients modify the same key."})]})]})]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Ensures atomic updates"})," in distributed stores."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Prevents race conditions"})," when multiple clients write to the same key."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Guarantees strong consistency"})," by checking versioning before updating."]}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:"Used in leader election, distributed locks, and state coordination."})}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Prevents lost updates"})," and ensures correct data modifications."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"api",children:"API"}),"\n",(0,t.jsx)(s.p,{children:"Kahuna provides an API for performing various operations on key/value pairs."}),"\n",(0,t.jsx)(s.h3,{id:"set",children:"Set"}),"\n",(0,t.jsx)(s.p,{children:"Sets or overwrites key/value pairs. The behavior of the API is modified based on the provided flags, which determine whether the operation occurs depending on the key's existence, current value, or current revision."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"(bool Set, long Revision) TrySet(string key, byte[] value, Flags flags, Consistency consistency);\n"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"key:"})," A unique identifier for the key/value pair."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"value:"})," The data object associated with the key."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"expiresMs:"})," The expiration time of the key in milliseconds."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"flags:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["If ",(0,t.jsx)(s.code,{children:"Flags.SetIfExists"})," is specified, the value is set only if the key already exists."]}),"\n",(0,t.jsxs)(s.li,{children:["If ",(0,t.jsx)(s.code,{children:"Flags.SetIfNotExists"})," is specified, the value is set only if the key does not exist."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"consistency:"})," Defines whether the key is ",(0,t.jsx)(s.strong,{children:"Ephemeral"})," or ",(0,t.jsx)(s.strong,{children:"Strongly Consistent"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Set:"})," ",(0,t.jsx)(s.code,{children:"true"})," if the key's value was modified."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Revision:"})," A global counter indicating how many times the key has been modified."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"compare-value-and-set-cvas",children:"Compare-Value-And-Set (CVAS)"}),"\n",(0,t.jsx)(s.p,{children:"Sets or overwrites key/value pairs, but only if the current value matches a specified comparison value."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"(bool Set, long Revision) TryCompareValueAndSet(string key, byte[] value, byte[] compareValue, Consistency consistency);\n"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"key:"})," A unique identifier for the key/value pair."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"value:"})," The data object associated with the key."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"compareValue:"})," If specified with ",(0,t.jsx)(s.code,{children:"Flags.SetIfEqualToValue"}),", the value is changed only if the current value matches the provided one."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"expiresMs:"})," The expiration time of the key in milliseconds."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"consistency:"})," Defines whether the key is ",(0,t.jsx)(s.strong,{children:"Ephemeral"})," or ",(0,t.jsx)(s.strong,{children:"Strongly Consistent"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Set:"})," ",(0,t.jsx)(s.code,{children:"true"})," if the key's value was modified."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Revision:"})," A global counter indicating how many times the key has been modified."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"compare-revision-and-set-cras",children:"Compare-Revision-And-Set (CRAS)"}),"\n",(0,t.jsx)(s.p,{children:"Sets or overwrites key/value pairs, but only if the current revision matches a specified comparison revision."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"(bool Set, long Revision) TryCompareRevisionAndSet(string key, byte[] value, long compareRevision, Consistency consistency);\n"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"key:"})," A unique identifier for the key/value pair."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"value:"})," The data object associated with the key."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"compareRevision:"})," If specified with ",(0,t.jsx)(s.code,{children:"Flags.SetIfEqualToRevision"}),", the value is changed only if the current revision matches the provided one."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"expiresMs:"})," The expiration time of the key in milliseconds."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"consistency:"})," Defines whether the key is ",(0,t.jsx)(s.strong,{children:"Ephemeral"})," or ",(0,t.jsx)(s.strong,{children:"Strongly Consistent"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Set:"})," ",(0,t.jsx)(s.code,{children:"true"})," if the key's value was modified."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Revision:"})," A global counter indicating how many times the key has been modified."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"get",children:"Get"}),"\n",(0,t.jsxs)(s.p,{children:["Retrieves the value of a key along with its revision. If the key does not exist, the special value ",(0,t.jsx)(s.code,{children:"nil"})," is returned."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"(bool Found, byte[] Value, long Revision) TryGet(string key);\n"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"key:"})," A unique identifier for the key/value pair."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Found:"})," ",(0,t.jsx)(s.code,{children:"true"})," if the key exists."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Value:"})," The value associated with the key."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Revision:"})," A global counter indicating how many times the key has been modified."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"delete",children:"Delete"}),"\n",(0,t.jsx)(s.p,{children:"Deletes a key and its associated value."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"(bool Deleted, long Revision) TryDelete(string key);\n"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"key:"})," A unique identifier for the key/value pair."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Deleted:"})," ",(0,t.jsx)(s.code,{children:"true"})," if the key/value pair was deleted."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Revision:"})," The global counter indicating how many times the key was modified at the time of deletion. Deleting a key does ",(0,t.jsx)(s.strong,{children:"not"})," increment the revision counter."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"extend",children:"Extend"}),"\n",(0,t.jsx)(s.p,{children:"Extends a key timeout. The key will be deleted after the key expires."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"(bool Extended, long Revision) TryExtend(string key, int expiresMs);\n"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"key:"})," A unique identifier for the key/value pair."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"expiresMs:"})," The expiration time of the key in milliseconds."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Extended:"})," ",(0,t.jsx)(s.code,{children:"true"})," if the key/value pair was deleted."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Revision:"})," The global counter indicating how many times the key was modified at the time of deletion. Extending the key does ",(0,t.jsx)(s.strong,{children:"not"})," increment the revision counter."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>o});var i=n(6540);const t={},r=i.createContext(t);function l(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);