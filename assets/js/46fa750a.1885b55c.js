"use strict";(self.webpackChunkkahunakv_docs=self.webpackChunkkahunakv_docs||[]).push([[415],{6552:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"distributed-sequencer","title":"Distributed Sequencer","description":"Kahuna\'s distributed sequencer enables clients to generate unique, sequential numbers. Clients can request sequences from either a single range or a pool of allowed ranges, ensuring flexibility in how numbers are allocated.","source":"@site/docs/distributed-sequencer.md","sourceDirName":".","slug":"/distributed-sequencer","permalink":"/docs/distributed-sequencer","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/distributed-sequencer.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Distributed Key/Value Store","permalink":"/docs/distributed-keyvalue-store"},"next":{"title":"Client for .NET","permalink":"/docs/dotnet-client"}}');var i=t(4848),r=t(8453);const a={sidebar_position:4},o="Distributed Sequencer",u={},c=[];function l(e){const n={h1:"h1",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"distributed-sequencer",children:"Distributed Sequencer"})}),"\n",(0,i.jsx)(n.p,{children:"Kahuna's distributed sequencer enables clients to generate unique, sequential numbers. Clients can request sequences from either a single range or a pool of allowed ranges, ensuring flexibility in how numbers are allocated."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Features:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strong Consistency & Durability:"})," Built with a focus on reliability, every generated sequence maintains strong consistency and durability. This guarantees that even in distributed environments, no sequence is ever duplicated or lost."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Efficient Load Distribution:"})," Leveraging Raft Groups, the system assigns sequences to different nodes. This strategy not only maximizes compute power across the cluster but also enhances performance and fault tolerance."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Seamless Integration:"})," The distributed sequencer is designed to be easily integrated into various applications, making it an ideal solution for systems requiring reliable, high-volume sequence generation."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In summary, this tool is a powerful asset for developers who need a highly available, fault-tolerant, and consistent sequence generation mechanism in a distributed architecture."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);