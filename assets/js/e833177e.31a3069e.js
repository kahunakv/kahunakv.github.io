"use strict";(self.webpackChunkkahunakv_docs=self.webpackChunkkahunakv_docs||[]).push([[3734],{4755:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"scripts","title":"Scripts","description":"Kahuna offers a scripting system in its key/value store called Kahuna Script. With these scripts, it\'s possible to execute logic that consistently reads data from the key/value store and also modifies or manipulates that data in an all-or-nothing fashion\u2014that is, changes won\u2019t be partially applied in the event of an error or failure.","source":"@site/docs/scripts.md","sourceDirName":".","slug":"/scripts","permalink":"/docs/scripts","draft":false,"unlisted":false,"editUrl":"https://github.com/kahunakv/kahunakv.github.io/tree/main/docs/docs/scripts.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Distributed Sequencer","permalink":"/docs/distributed-sequencer"},"next":{"title":"Set","permalink":"/docs/scripts/commands/set"}}');var r=t(4848),s=t(8453);const a={},l="Scripts",o={},c=[{value:"Atomic Check-and-Set (CAS)",id:"atomic-check-and-set-cas",level:2},{value:"Leaky Bucket Rate Limiter",id:"leaky-bucket-rate-limiter",level:2},{value:"Atomic Inventory Reservation",id:"atomic-inventory-reservation",level:2},{value:"Expiring Counter",id:"expiring-counter",level:2},{value:"Session Refresh (Sliding Expiration)",id:"session-refresh-sliding-expiration",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"scripts",children:"Scripts"})}),"\n",(0,r.jsxs)(n.p,{children:["Kahuna offers a scripting system in its key/value store called ",(0,r.jsx)(n.strong,{children:"Kahuna Script"}),". With these scripts, it's possible to execute logic that consistently reads data from the key/value store and also modifies or manipulates that data in an ",(0,r.jsx)(n.strong,{children:"all-or-nothing"})," fashion\u2014that is, changes won\u2019t be partially applied in the event of an error or failure."]}),"\n",(0,r.jsx)(n.p,{children:"A script can be something as simple as a single command to set a value on the key/value store:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-swift",children:'kahuna-cli> set `services/email/instance-3` \'{"ip": "10.1.1.22", "port": 9090}\'\nr0 set 19ms\n'})}),"\n",(0,r.jsx)(n.p,{children:"or more elaborate examples that solve real-world problems:"}),"\n",(0,r.jsx)(n.h2,{id:"atomic-check-and-set-cas",children:"Atomic Check-and-Set (CAS)"}),"\n",(0,r.jsxs)(n.p,{children:["Use case: Only update a value if it matches the expected current value \u2014 useful for optimistic concurrency control. Prevent race conditions when multiple clients are trying to update shared state (e.g., balance or session info). It can be done with the built-in ",(0,r.jsx)(n.code,{children:"set/cmp"})," command, for example,\nonly update the value if the current revision is ",(0,r.jsx)(n.strong,{children:"0"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-visual-basic",children:'set `election/leader` "node-A" cmprev 0\n'})}),"\n",(0,r.jsx)(n.p,{children:"we can return a custom value according to the result of the operation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-visual-basic",children:'set `election/leader` "node-A" cmprev 0\nif not set then\n  return false\nend\nreturn true\n'})}),"\n",(0,r.jsx)(n.p,{children:"or throw an exception if the value can't be changed:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-visual-basic",children:'set `election/leader` "node-A" cmprev 0\nif not set then\n  throw "election failed"\nend\nreturn true\n'})}),"\n",(0,r.jsx)(n.p,{children:"the CAS operation can be completely implemented using basic building blocks and control structures:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-visual-basic",children:'let current_leader = get `election/leader`\nif rev(current_leader) == 0 then\n  set `election/leader` "node-A"\nelse\n  throw "election failed"\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"leaky-bucket-rate-limiter",children:"Leaky Bucket Rate Limiter"}),"\n",(0,r.jsx)(n.p,{children:"Limit how many actions a user/IP can do over time (e.g., login attempts or API calls). Throttle traffic, avoid brute-force attacks."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-visual-basic",children:"let rate_limit = get @rate_limit_param\nlet last_refill = get @last_refill_param\n\nlet tokens = to_int(rate_limit)\nlet last_refill = to_int(last_refill)\n\nlet current_time = current_time()\nlet elapsed = current_time - last_refill\nlet refill = floor(elapsed / @refill_interval_param)\n\nlet tokens = min(tokens + refill, tokens)\n\nif tokens <= 0 then\n  return 0\nend\n\nset @rate_limit_param tokens - 1\nset @last_refill_param current_time\nreturn 1\n"})}),"\n",(0,r.jsx)(n.h2,{id:"atomic-inventory-reservation",children:"Atomic Inventory Reservation"}),"\n",(0,r.jsx)(n.p,{children:"Reserve stock if available; useful for flash sales or ticketing systems.\nPrevent overselling in e-commerce under high load."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-visual-basic",children:"let inventory_key = get @inventory_key\nlet requested_amount = get @requested_amount\n\nlet inventory = to_int(inventory_key)\nlet requested = to_int(requested_amount)\n\nif current >= requested then\n  set inventory_key inventory - requested\n  return 1\nelse\n  return 0\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"expiring-counter",children:"Expiring Counter"}),"\n",(0,r.jsx)(n.p,{children:"Count events (like logins or API hits) and auto-expire the counter after some time."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-visual-basic",children:"let current_count = get @counter_key_param\nlet expected_increment = to_int(@expected_increment_param)\nlet expected_limit = to_int(@expected_limit_param)\n\nlet new_count = current_count + expected_increment\nset @counter_key new_count\n\nif new_count >= expected_limit then\n  extend @counter_key @expiration_in_seconds\nend\n\nreturn new_count\n"})}),"\n",(0,r.jsx)(n.h2,{id:"session-refresh-sliding-expiration",children:"Session Refresh (Sliding Expiration)"}),"\n",(0,r.jsx)(n.p,{children:"Refresh TTL on user session only if it exists. Prevent user sessions from expiring while they're still active."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-visual-basic",children:"let exists_key = exists @session_key\nif exists_key then\n extend @session_key @ttl_in_seconds\n return 1\nend\nreturn 0\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);